/* INPUT HELPERS */
.input-component {
  --input-bg: transparent;
  --input-color: var(--white);
  /* Focus */
  --input-focus-bg: transparent;
  --input-focus-color: var(--text-color);
  --input-focus-border: var(--text-color);
  --input-border-width: 1px;
}

.input-component.has-border {
  @apply border-b border-white/50 pb-10;
}

/* Input Sizes */

.input-component .input.disabled,
.input-component .input[disabled] {
  opacity: 0.3;
  cursor: not-allowed !important;
  pointer-events: none !important;
}

.input-component:hover .input {
  --input-bg: var(--input-hover-bg);
  --input-color: var(--input-hover-color);
  --input-border: var(--input-hover-border);
}

.input-component[data-focused='true'] .input {
  --input-bg: var(--input-hover-bg);
  --input-color: var(--input-hover-color);
  --input-border: var(--input-hover-border);
}

.input-component .input {
  appearance: none;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  -webkit-touch-callout: none;
  outline: none;
  display: inline-block;
  width: 100%;
  vertical-align: middle;
  background: var(--input-bg);
  border: var(--input-border-width) solid;
  height: var(--input-height);
  line-height: 1em;
  text-transform: inherit;
  letter-spacing: 0;
  border-radius: var(--input-border-radius);
  color: inherit;
  font-style: inherit;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  line-height: inherit;
  text-align: left;
  box-shadow: none;
  padding: 0 calc(var(--input-height) * 0.3) 0;
}

.input-component.has-label .input {
  padding-top: 16px;
}

.input::placeholder {
  @apply text-white/50;
}

.input-component .input::placeholder,
.input-component textarea::placeholder {
  @apply text-white/50;
}

.input-component .input:not([class*='transition']) {
  transition:
    background var(--md-speed) ease-in-out,
    color var(--md-speed) ease-in-out,
    border var(--md-speed) ease-in-out,
    box-shadow var(--md-speed) ease-in-out,
    transform var(--md-speed) ease-in-out,
    opacity var(--md-speed) ease-in-out;
}

.input-component.solid {
  --input-bg: var(--light-grey);
  --input-color: var(--text-color);
  --input-border: var(--light-grey);
  /* Hover */
  --input-hover-bg: var(--light-grey);
  --input-hover-color: var(--text-color);
  --input-hover-border: var(--light-grey);
  /* Focus */
  --input-focus-bg: var(--bg-grey);
  --input-focus-color: var(--text-color);
  --input-focus-border: var(--text-color);
}

/* Input Themes */
.input-component.transparent {
  --input-bg: transparent;
  --input-color: var(--light-text-color);
  --input-border: transparent;
  /* Hover */
  --input-hover-bg: transparent;
  --input-hover-color: var(--text-color);
  --input-hover-border: transparent;
  /* Focus */
  --input-focus-bg: transparent;
  --input-focus-color: var(--text-color);
  --input-focus-border: var(--text-color);
}

/* Input Icon */
.input-component .input-icon {
}

/* Input Label */
.input-component .input-label {
  position: absolute;
  font-style: inherit;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  line-height: inherit;
  top: 0;
  left: var(--input-border-width);
  margin: 0 calc(var(--input-height) * 0.3);
  height: 100%;
  display: flex;
  align-items: center;
  pointer-events: none;
  color: var(--input-color);
  height: var(--input-height);
  transition:
    transform var(--md-speed) cubic-bezier(0.44, 0.24, 0.16, 1),
    color var(--md-speed) cubic-bezier(0.44, 0.24, 0.16, 1);
  transform-origin: 0% 50%;
}

.input-component[data-focused='true'] .input-label {
  transform: translate3d(0, -10px, 0) scale(0.8);
}

.input-component.icon-left .input-label {
  margin-left: var(--input-size);
}

.input-component.icon-right .input-label {
  margin-right: var(--input-size);
}

.input-component[data-focused='true'] .input-label,
.input-component.has-value .input-label,
.input-component.has-placeholder .input-label {
}

/* States */
.input-component.error .input-icon,
.input-component.error .input-label {
  color: var(--error);
}
.input-component.error .input {
  border-color: var(--error);
}

.input-component.success .input-icon,
.input-component.success .input-label {
  color: var(--success);
}
.input-component.success .input {
  border-color: var(--success);
}

/* Textarea */
.input-component textarea {
  appearance: none;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  -webkit-touch-callout: none;
  outline: none;
  display: inline-block;
  width: 100%;
  vertical-align: middle;
  background: var(--input-bg);
  border: var(--input-border-width) solid;
  min-height: var(--input-height);
  line-height: 1.3em;
  text-transform: inherit;
  letter-spacing: 0;
  border-radius: var(--input-border-radius);
  color: inherit;
  font-style: inherit;
  font-size: inherit;
  font-family: inherit;
  font-weight: inherit;
  line-height: inherit;
  text-align: left;
  box-shadow: none;
  padding: calc(var(--input-height) * 0.26) calc(var(--input-height) * 0.3);
  resize: none;
}

/* Radio Buttons */
.container {
  @apply relative block cursor-pointer text-white/50 my-20 pl-30;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.container input {
  @apply absolute opacity-0 cursor-pointer h-0 w-0;
}

.checkmark {
  @apply absolute top-0 left-0 h-15 w-15 border border-white/50 bg-black;
}

/* .container:hover input ~ .checkmark {
    @apply bg-white/25;
  } */

.container input:checked ~ .checkmark {
  @apply bg-white/50;
}

.checkmark:after {
  @apply hidden absolute;
  content: '';
}

.container input:checked ~ .checkmark:after {
  @apply block;
}

.container .checkmark:after {
  @apply left-4 top-2 w-4 h-8 border border-solid border-white border-b-2 border-r-2 border-l-0 border-t-0 transform rotate-45;
}
